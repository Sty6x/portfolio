---
import MainLayout from "../layouts/MainLayout.astro";
import ToBtn from "../components/ToBtn.astro";
import GitRepo from "../components/GitRepo.astro";
import {Octokit} from "octokit";
import FeaturedCard from "../components/FeaturedCard.astro";
const octokit = new Octokit({auth: import.meta.env.GIT_KEY});

const key = import.meta.env.GIT_KEY;
---

<MainLayout title="Projects">
	<section id="title-container">
		<h1 id="page-title">Work. Hobby. Passion.</h1>
	</section>
	<section id="left">
		<div id="left-header">
			<div id="back-btn-container">
				<ToBtn link="/" />
				<p class="btn-text">Back to home.</p>
			</div>
			<p class="text-content header-text">
				Here are some of the projects Iâ€™ve built throughout my journey of
				studying
				<span>
					{"<Software Development/>"}
				</span>
			</p>
		</div>
		<div id="featured-projects">
			<h1 class="title">Featured Projects</h1>
			<FeaturedCard />
		</div>
	</section>
	<section id="right">
		<div id="right-header">
			<h1 class="title">Projects im currently working on</h1>
			<div id="current-projects-container">
				<GitRepo />
				<GitRepo />
				<GitRepo />
				<GitRepo />
			</div>
		</div>
		<footer id="end">
			<div id="footer-text">
				<p class="text-content footer-text">
					Making <span class="footer-highlight" id="ideas">Ideas</span> and <span
						class="footer-highlight"
						id="imaginations">Imaginations</span
					>
					 come to life, to help me and others benefit from the usefulness of my
					work.
				</p>
				<div>
					<a id="github-link" href="https://github.com/Sty6x"
						>More projects here.</a
					>
				</div>
			</div>
			<div id="to-email-page">
				<p class="btn-text">How to reach me.</p>
				<ToBtn link="/contact" />
			</div>
		</footer>
	</section>
</MainLayout>

<script define:vars={{key}} is:inline>
const gitRepoComponents = document.querySelectorAll(".repo-container");
const gitRepos = Array.from(gitRepoComponents);
async function fetchRepositories() {
	try {
		const repos = await fetch(
			"https://api.github.com/user/repos?sort=pushed&per_page=4&type=public&direction=desc",
			{
				method: "GET",
				headers: {
					accept: "application/vnd.github+json",
					authorization: `Bearer ${key}`,
				},
			},
		);
		const fetchedRepos = await repos.json();
		return fetchedRepos;
	} catch (error) {
		console.log(error);
		throw err;
	}
}
fetchRepositories()
	.then(async (data) => {
		const getLanguages = await Promise.all(
			data.map((repo) =>
				fetch(repo.languages_url, {
					method: "GET",
					headers: { Authorization: `Bearer ${key}` },
				}).then((language) => language.json()),
			),
		);
		return { getLanguages, data };
	})
	.then(({ getLanguages, data }) => {
		const relevantData = data.map((repo, i) => {
			const newData = {
				id: repo.id,
				name: repo.name,
				url: repo.html_url,
				desc: repo.description,
				languageList:
					Object.keys(getLanguages[i]).length !== 0
						? Object.keys(getLanguages[i])[0]
						: "Markdown",
			};
			return newData;
		});

		console.log(relevantData);
		return relevantData;
	})
	.then(displayRepoData);

async function displayRepoData(data) {
	const gitRepoComponents = document.querySelectorAll(".repo-container");
	const gitRepos = Array.from(gitRepoComponents);
	data.map(({ id, name, url, desc, languageList }, i) => {
		const repoTitle = gitRepos[i].childNodes[0].childNodes[0].childNodes[0];
		const repoDesc = gitRepos[i].childNodes[0].childNodes[1];
		const languageText = gitRepos[i].childNodes[1];

		gitRepos[i].setAttribute("href", url);

		repoTitle.textContent = name;
		repoDesc.textContent = desc;

		languageText.textContent = languageList;
	});
}
</script>

<style>
	#title-container {
		display: block;
	}
	#page-title {
		font-size: 4rem;
		text-align: start;
		font-weight: 600;
	}
	section {
		height: 100%;
		flex: 1;
	}
	#right,
	#left {
		display: flex;
		flex-direction: column;
		gap: 4em;
	}
	#left {
		margin-top: 4em;
		flex-direction: column;
	}

	#back-btn-container {
		display: flex;
		align-items: center;
		#to-btn {
			transform: rotate(180deg);
		}
	}

	#left-header {
		display: flex;
		/* flex-direction: column; */
		& > :not(:first-child) {
			& > span {
				color: var(--accent1);
			}
		}
	}
	.text-content {
		position: relative;
		text-align: end;
		max-width: 60%;
		font-weight: 500;
		font-size: clamp(1rem, 1vw + 1.2rem, 3rem);
		margin-left: auto;
	}
	#header-text,
	#footer-text {
		flex: 1;
	}
	.title {
		font-size: clamp(1rem, 1vw + 1rem, 2rem);
		font-weight: 500;
		z-index: 10;
		position: relative;
		line-height: 40px;
		&::after {
			z-index: 1;
			content: "";
			position: absolute;
			display: block;
			width: 100%;
			height: 5px;
			background-color: var(--lighter-shade);
		}
	}

	#featured-projects {
		display: flex;
		flex: 1;
		flex-direction: column;
		gap: 1em;
	}
	#right-header {
		display: flex;
		flex-direction: column;
	}
	#current-projects-container {
		display: grid;
		grid-template-rows: repeat(2, minmax(200px, 1fr));
		grid-template-columns: repeat(2, 1fr);
		gap: 0.6em;
		padding: 1em 0;
	}

	footer {
		flex: 1;
		display: flex;
		flex-direction: column;
	}
	#footer-text {
		/* margin-bottom: auto; */
		gap: 1em;
		display: flex;
		flex-direction: column;
		& > :first-child {
			text-align: start;
		}
		& > :last-child {
			flex: 1;
		}
	}
	#to-email-page {
		display: flex;
		align-items: center;
		justify-content: end;
		/* gap: 1em; */
		margin-top: 1em;
	}
	.footer-highlight:first-of-type {
		color: var(--accent2);
	}

	.footer-highlight:last-of-type {
		color: var(--accent3);
	}

	@keyframes github-link {
		from {
			opacity: 0;
			transform: translateY(50px);
		}
		to {
			opacity: 1;
			transform: translateY(0px);
		}
	}

	#github-link {
		position: absolute;
		opacity: 0;
		animation: reveal-y forwards normal 400ms 200ms ease-in-out;
		font-weight: 500;
		font-size: 1rem;
	}

	@keyframes github-line {
		from {
			opacity: 0;
			left: 100%;
			height: 5px;
			width: 20%;
		}
		to {
			height: 5px;
			width: 20%;
			left: 0;
			opacity: 1;
		}
	}

	#github-link::after {
		height: 5px;
		width: 20%;
		left: 0;
		content: "";
		position: absolute;
		display: block;
		background-color: var(--accent1);
		transition: width 200ms ease-in-out;
		/* animation: github-line 600ms 450ms ease-in-out forwards normal; */
	}
	#github-link:hover {
		&::after {
			width: 100%;
			transition: width 200ms ease-in-out;
		}
	}
	.header-text {
		margin-right: 17px;
	}
	.footer-text {
		display: block;
		margin-left: 17px;
	}
	.header-text::after {
		right: -2%;
		animation: text-cover 700ms 150ms ease-in-out forwards normal;
		right: -20px;
	}

	.footer-text::after {
		left: -2%;
		left: -20px;
		animation: text-cover 700ms 450ms ease-in-out forwards normal;
		transform: rotate(180deg);
	}
	.footer-text::after,
	.header-text::after {
		content: "";
		display: block;
		position: absolute;
		top: 0;
		width: 105%;
		height: 102%;
		background-color: var(--bg);
		z-index: 10;
	}

	/* @media (min-height: 960px) {
		#current-projects-container {
			grid-template-rows: repeat(2, minmax(200px, 300px));
			grid-template-columns: repeat(2, 1fr);
		}
	} */
	@media (max-width: 1920px) and (min-height: 1000px) {
		#current-projects-container {
			grid-template-rows: repeat(2, minmax(200px, 300px));
			grid-template-columns: repeat(2, 1fr);
		}
		#back-btn-container,
		#to-email-page {
			gap: 2em;
		}
	}
	@media (min-width: 1921px) {
		#current-projects-container {
			grid-template-rows: repeat(2, minmax(200px, 300px));
			grid-template-columns: repeat(2, 1fr);
		}
		#back-btn-container,
		#to-email-page {
			gap: 2em;
		}
	}

	@media (max-width: 1024px) {
		#left-header {
			flex-direction: column;
		}
		#left {
			min-height: min-content !important;

			flex-direction: column;
		}
		#right {
			flex-direction: column;
		}
	}

	@media (max-width: 900px) {
	}
	@media (min-width: 320px) and (max-width: 600px) {
		#current-projects-container {
			display: flex;
			flex-direction: column;
			height: 500px;
			gap: 0.6em;
			padding: 1em 0;
		}
	}
</style>
