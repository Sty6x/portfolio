---
import GitRepo from "../components/GitRepo.astro";
import {Octokit} from "octokit";
import FeaturedCard from "../components/FeaturedItem.astro";
import Footer from "../components/Footer.astro";
import Layout from "../layouts/Layout.astro";
import SubHeaders from "../components/SubHeaders.astro";
import FeaturedItem from "../components/FeaturedItem.astro";
import ToBtn from "../components/ToBtn.astro";
const octokit = new Octokit({auth: import.meta.env.GIT_KEY});
const key = import.meta.env.GIT_KEY;
const placeholders = [
	{
		title: "Vimnotes",
		style: {color: "#a5a2de"},
		paraText:
			"A markdown note taking web app using a keyboard oriented approach for taking notes using vim key bindings",
		linkTo: "/projects",
		meta: ["Web app", "Vim", "Markdown", "React", "Firebase"],
	},
	{
		title: "Warframe Event Status CLI",
		style: {color: "#deb3a2"},
		paraText:
			"A cli tool to fetch and display current in-game status of warframe events inside of the terminal",
		linkTo: "/projects",
		meta: ["Terminal", "Warframe", "Nodejs", "CLI", "TypeScript"],
	},
	{
		title: "Time Tracker",
		style: {color: "#a0cfeb"},
		paraText:
			"A chrome extension that tracks how long you've visited a site and how many times you've visited a site.",
		linkTo: "/projects",
		meta: ["Chrome Extension", "Productivity", "Tracker"],
	},
];
---

<Layout title="Projects">
	<div id="project-container">
		<section id="title-container">
			<h1 class="highlight-text">Create.</h1>
			<p>
				<span> Inspiring</span> and <span>Passionate</span> projects that i've
				built throughout my coding journey as a <span>Front-end developer</span
				>.
			</p>
		</section>
		<section id="featured-container" class="center-separator section-container">
			<SubHeaders
				title={"Featured Projects"}
				paraText={"Some of my favorite projects that I have worked on"}
			/>
			<div class="featured-items-container">
				{
					placeholders.map((data) => {
						return (
							<FeaturedItem
								componentStyles={data.style}
								metaArr={data.meta}
								title={data.title}
								paraText={data.paraText}
								linkTo={data.linkTo}
							/>
						);
					})
				}
			</div>
		</section>
		<section id="recent-container section-container">
			<SubHeaders
				title={"Recent activities"}
				paraText={"Tracking all of the recent activities on my github"}
			/>
			<div class="recent-git-container">
				<GitRepo />
				<GitRepo />
				<GitRepo />
				<GitRepo />
				<GitRepo />
				<GitRepo />
			</div>
		</section>
		<ToBtn link="https://github.com/Sty6x" text={"Visit my Github profile"} />
		<Footer />
	</div>
</Layout>

<script define:vars={{key}}>
	// import formatDistance from "date-fns/formatDistance";
	const gitRepoComponents = document.querySelectorAll(".repo-container");
	const gitRepos = Array.from(gitRepoComponents);
	async function fetchRepositories() {
		try {
			const repos = await fetch(
				"https://api.github.com/user/repos?sort=pushed&per_page=6&type=public&direction=desc",
				{
					method: "GET",
					headers: {
						accept: "application/vnd.github+json",
						authorization: `Bearer ${key}`,
					},
				},
			);
			const fetchedRepos = await repos.json();
			return fetchedRepos;
		} catch (error) {
			console.log(error);
			throw err;
		}
	}
	fetchRepositories()
		.then(async (data) => {
			const getLanguages = await Promise.all(
				data.map((repo) =>
					fetch(repo.languages_url, {
						method: "GET",
						headers: {Authorization: `Bearer ${key}`},
					}).then((language) => language.json()),
				),
			);
			return {getLanguages, data};
		})
		.then(({getLanguages, data}) => {
			const relevantData = data.map((repo, i) => {
				const newData = {
					id: repo.id,
					name: repo.name,
					url: repo.html_url,
					desc: repo.description,
					stars: repo.stargazers_count,
					pushedDate: repo.pushed_at,
					languageList:
						Object.keys(getLanguages[i]).length !== 0
							? Object.keys(getLanguages[i])[0]
							: "Markdown",
				};
				return newData;
			});

			console.log(relevantData);
			return relevantData;
		})
		.then(displayRepoData);

	async function displayRepoData(data) {
		const gitRepoComponents = document.querySelectorAll(".repo-container");
		const gitRepos = Array.from(gitRepoComponents);
		data.map(({id, name, url, desc, languageList, stars, pushedDate}, i) => {
			const repoTitle = gitRepos[i].childNodes[0].childNodes[0].childNodes[0];
			const repoDate = gitRepos[i].childNodes[0].childNodes[1];
			const dateOptions = {
				weekday: "short",
				year: "numeric",
				month: "short",
				day: "numeric",
			};
			const repoDesc = gitRepos[i].childNodes[0].childNodes[2];
			const languageText =
				gitRepos[i].childNodes[1].childNodes[0].childNodes[0];
			const starCount = gitRepos[i].childNodes[1].childNodes[1].childNodes[0];

			gitRepos[i].setAttribute("href", url);

			repoTitle.textContent = name;
			// repoDate.textContent = formatDistance(new Date(), new Date(pushedDate));

			repoDate.textContent = new Date(pushedDate).toLocaleDateString(
				"en-US",
				dateOptions,
			);
			repoDesc.textContent = desc;

			languageText.textContent = `${languageList}`;
			starCount.textContent = `${stars}`;
		});
	}
</script>

<style>
	.btn {
		width: max-content;
	}
	#project-container {
		display: flex;
		flex-direction: column;
		flex: 1;
		gap: 2em;
		position: relative;
	}

	#project-container::before {
		opacity: 0;
		content: "Projects";
		position: absolute;
		display: inline-block;
		color: var(--text);
		font-weight: 600;
		text-transform: uppercase;
		rotate: 90deg;
		font-size: 120px;
		left: -390px;
		z-index: -1;
		animation: text-back-anim-before 400ms ease-in-out forwards normal;
	}
	#project-container::after {
		opacity: 0;
		content: "Work";
		position: absolute;
		display: inline-block;
		color: var(--text);
		opacity: 0.1;
		font-weight: 600;
		text-transform: uppercase;
		rotate: 90deg;
		font-size: 120px;
		right: -290px;
		z-index: -1;
		animation: text-back-anim-after 400ms ease-in-out forwards normal;
	}

	#title-container {
		& > h1 {
			font-size: 64px;
			font-weight: 600;
			margin-bottom: 0.2em;
		}
		& > p {
			text-transform: uppercase;
			color: var(--light-shade);
			max-width: 38em;
			font-size: 20px;
			line-height: 24px;
			& > span {
				font-weight: 600;
			}
			& > span:nth-of-type(2) {
				color: var(--accent1);
			}

			& > span:nth-of-type(1) {
				color: var(--accent2);
			}

			& > span:nth-of-type(3) {
				color: var(--accent3);
			}
		}
	}
	.center-separator {
		padding: 2em 0em;
		border-top: 1px solid var(--text);
		border-bottom: 1px solid var(--text);
	}

	.featured-items-container {
		display: flex;
		flex-direction: column;
		gap: 1em;
	}

	.section-container {
		flex: 1;
	}

	.highlight-text {
		color: var(--accent1);
	}
	.recent-git-container {
		display: grid;
		grid-template-rows: repeat(2, auto);
		grid-template-columns: repeat(3, auto);
		gap: 1em;
	}
	@media (max-width: 600px) {
		#title-container {
			& > p {
				font-size: 16px;
				line-height: 20px;
			}
		}
	}
	@media (max-width: 760px) {
		.recent-git-container {
			display: grid;
			grid-template-rows: repeat(3, auto);
			grid-template-columns: repeat(2, auto);
			gap: 1em;
		}
	}
	@media (max-width: 1024px) {
		#project-container::before {
			display: none;
		}

		#project-container::after {
			display: none;
		}
	}

	@media (max-width: 450px) {
		.recent-git-container {
			display: flex;
			flex-direction: column;
			gap: 1em;
		}
	}
</style>
